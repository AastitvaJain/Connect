// <auto-generated />
using System;
using Connect;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Connect.Common.MigrationDev
{
    [DbContext(typeof(ConnectDbContext))]
    [Migration("20250513175559_PaymentClient")]
    partial class PaymentClient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Connect.AccountDao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email_id");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("EmailId")
                        .IsUnique();

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("Connect.ApprovalCostSheetDao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<long>("Id"), 100000L, null, null, null, null, null);

                    b.Property<long>("ApproveRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("approve_request_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("PropertyRecordId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_record_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ApproveRequestId");

                    b.ToTable("approval_cost_sheet", (string)null);
                });

            modelBuilder.Entity("Connect.ApprovalCostSheetItemDao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<long>("Id"), 100000L, null, null, null, null, null);

                    b.Property<long>("CostSheetId")
                        .HasColumnType("bigint")
                        .HasColumnName("cost_sheet_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<float?>("DiscountAdjustment")
                        .HasColumnType("real")
                        .HasColumnName("discount_adjustment");

                    b.Property<float?>("FtAdjustment")
                        .HasColumnType("real")
                        .HasColumnName("ft_adjustment");

                    b.Property<float?>("GstPayable")
                        .HasColumnType("real")
                        .HasColumnName("gst_payable");

                    b.Property<float?>("NetPayableByCustomer")
                        .HasColumnType("real")
                        .HasColumnName("net_payable_by_customer");

                    b.Property<string>("Particular")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("particular");

                    b.Property<float?>("PaymentPercentage")
                        .HasColumnType("real")
                        .HasColumnName("payment_percentage");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer")
                        .HasColumnName("sequence");

                    b.Property<float?>("TotalPaymentWithoutTax")
                        .HasColumnType("real")
                        .HasColumnName("total_payment_without_tax");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CostSheetId");

                    b.ToTable("approval_cost_sheet_item", (string)null);
                });

            modelBuilder.Entity("Connect.ApprovalPropertyRecordDao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<long>("Id"), 100000L, null, null, null, null, null);

                    b.Property<long?>("BuyApproveRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("buy_approve_request_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<float>("OriginalRate")
                        .HasColumnType("real")
                        .HasColumnName("original_rate");

                    b.Property<Guid>("PropertyRecordId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_record_id");

                    b.Property<float?>("ProposedRate")
                        .HasColumnType("real")
                        .HasColumnName("proposed_rate");

                    b.Property<long?>("SellApproveRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("sell_approve_request_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BuyApproveRequestId");

                    b.HasIndex("SellApproveRequestId");

                    b.ToTable("approval_property_record", (string)null);
                });

            modelBuilder.Entity("Connect.ApproveRequestDao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<long>("Id"), 100000L, null, null, null, null, null);

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<int>("ClientSequence")
                        .HasColumnType("integer")
                        .HasColumnName("client_sequence");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("boolean")
                        .HasColumnName("is_applied");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("note");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("ClientId", "ClientSequence");

                    b.ToTable("approve_request", (string)null);
                });

            modelBuilder.Entity("Connect.ChannelPartnerDao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("channel_partner", (string)null);
                });

            modelBuilder.Entity("Connect.ClientDao", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Sequence"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Sequence"), 100000L, null, null, 999999L, null, null);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("EmailId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_id");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_submitted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone_no");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id", "Sequence");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("Connect.ClientPaymentDao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<float>("AmountPaid")
                        .HasColumnType("real")
                        .HasColumnName("amount_paid");

                    b.Property<string>("ChannelPartnerId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("channel_partner_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<int>("ClientSequence")
                        .HasColumnType("integer")
                        .HasColumnName("client_sequence");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomChannelPartnerName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_channel_partner_name");

                    b.Property<string>("CustomChannelPartnerNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("custom_channel_partner_number");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("payment_id");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("payment_mode");

                    b.Property<float>("TotalBuyAmount")
                        .HasColumnType("real")
                        .HasColumnName("total_buy_amount");

                    b.Property<float>("TotalSellAmount")
                        .HasColumnType("real")
                        .HasColumnName("total_sell_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ClientId", "ClientSequence")
                        .IsUnique();

                    b.ToTable("client_payment", (string)null);
                });

            modelBuilder.Entity("Connect.NewInventoryDao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<float?>("BookingAmount")
                        .HasColumnType("real")
                        .HasColumnName("booking_amount");

                    b.Property<float>("BuiltUpArea")
                        .HasColumnType("real")
                        .HasColumnName("built_up_area");

                    b.Property<float?>("Premium")
                        .HasColumnType("real")
                        .HasColumnName("premium");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("project_name");

                    b.Property<string>("ProjectType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("project_type");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("property_id");

                    b.Property<float>("Rate")
                        .HasColumnType("real")
                        .HasColumnName("rate");

                    b.Property<float>("TotalConsideration")
                        .HasColumnType("real")
                        .HasColumnName("total_consideration");

                    b.Property<string>("UnitNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("unit_no");

                    b.HasKey("Id");

                    b.ToTable("new_inventory", (string)null);
                });

            modelBuilder.Entity("Connect.NewLeadDao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("InterestedProject")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("interested_project");

                    b.Property<string>("LeadStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lead_status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("new_lead", (string)null);
                });

            modelBuilder.Entity("Connect.ProjectOfferDao", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<float?>("OfferAmount")
                        .HasColumnType("real")
                        .HasColumnName("offer_amount");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("project_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("project_offer", (string)null);
                });

            modelBuilder.Entity("Connect.PropertyRecordDao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<float?>("ApprovedRate")
                        .HasColumnType("real")
                        .HasColumnName("approved_rate");

                    b.Property<int?>("BuyerId")
                        .HasColumnType("integer")
                        .HasColumnName("buyer_id");

                    b.Property<int?>("BuyerSequence")
                        .HasColumnType("integer")
                        .HasColumnName("buyer_sequence");

                    b.Property<float?>("DraftRate")
                        .HasColumnType("real")
                        .HasColumnName("draft_rate");

                    b.Property<Guid?>("NewLeadId")
                        .HasColumnType("uuid")
                        .HasColumnName("new_lead_id");

                    b.Property<float>("OriginalRate")
                        .HasColumnType("real")
                        .HasColumnName("original_rate");

                    b.Property<string>("PaymentPlan")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("payment_plan");

                    b.Property<Guid>("PropertyRecordId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_record_id");

                    b.Property<float?>("RequestedRate")
                        .HasColumnType("real")
                        .HasColumnName("requested_rate");

                    b.Property<int?>("SellerId")
                        .HasColumnType("integer")
                        .HasColumnName("seller_id");

                    b.Property<int?>("SellerSequence")
                        .HasColumnType("integer")
                        .HasColumnName("seller_sequence");

                    b.HasKey("Id");

                    b.HasIndex("NewLeadId");

                    b.HasIndex("BuyerId", "BuyerSequence");

                    b.HasIndex("SellerId", "SellerSequence");

                    b.ToTable("property_record", (string)null);
                });

            modelBuilder.Entity("Connect.SoldInventoryDao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AssuredPrice")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("assured_price");

                    b.Property<string>("BookingDate")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("booking_date");

                    b.Property<string>("BookingId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("booking_id");

                    b.Property<float>("BuiltUpArea")
                        .HasColumnType("real")
                        .HasColumnName("built_up_area");

                    b.Property<string>("BuyerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("buyer_name");

                    b.Property<float?>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<float>("NetReceived")
                        .HasColumnType("real")
                        .HasColumnName("net_received");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("project_name");

                    b.Property<string>("ProjectType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("project_type");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("property_id");

                    b.Property<float>("Rate")
                        .HasColumnType("real")
                        .HasColumnName("rate");

                    b.Property<string>("SrNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sr_no");

                    b.Property<float>("TotalConsideration")
                        .HasColumnType("real")
                        .HasColumnName("total_consideration");

                    b.Property<string>("UnitCategory")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("unit_category");

                    b.Property<string>("UnitNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("unit_no");

                    b.HasKey("Id");

                    b.ToTable("sold_inventory", (string)null);
                });

            modelBuilder.Entity("Connect.AccountDao", b =>
                {
                    b.OwnsOne("Connect.Accounts.Auth", "Auth", b1 =>
                        {
                            b1.Property<long>("AccountDaoId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreateTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("auth_created");

                            b1.Property<long>("Token")
                                .HasColumnType("bigint")
                                .HasColumnName("auth_token");

                            b1.HasKey("AccountDaoId");

                            b1.ToTable("account");

                            b1.WithOwner()
                                .HasForeignKey("AccountDaoId");
                        });

                    b.OwnsOne("Connect.Password", "Password", b1 =>
                        {
                            b1.Property<long>("AccountDaoId")
                                .HasColumnType("bigint");

                            b1.Property<byte[]>("Hash")
                                .IsRequired()
                                .HasColumnType("bytea")
                                .HasColumnName("password_hash");

                            b1.Property<int>("IterationCount")
                                .HasColumnType("integer")
                                .HasColumnName("password_iterations");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasColumnType("bytea")
                                .HasColumnName("password_salt");

                            b1.Property<DateTime>("UpdateTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("password_updated");

                            b1.HasKey("AccountDaoId");

                            b1.ToTable("account");

                            b1.WithOwner()
                                .HasForeignKey("AccountDaoId");
                        });

                    b.Navigation("Auth");

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("Connect.ApprovalCostSheetDao", b =>
                {
                    b.HasOne("Connect.ApproveRequestDao", "ApproveRequest")
                        .WithMany("CostSheets")
                        .HasForeignKey("ApproveRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApproveRequest");
                });

            modelBuilder.Entity("Connect.ApprovalCostSheetItemDao", b =>
                {
                    b.HasOne("Connect.ApprovalCostSheetDao", "CostSheet")
                        .WithMany("Items")
                        .HasForeignKey("CostSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostSheet");
                });

            modelBuilder.Entity("Connect.ApprovalPropertyRecordDao", b =>
                {
                    b.HasOne("Connect.ApproveRequestDao", "BuyApproveRequest")
                        .WithMany("BuyPropertyChanges")
                        .HasForeignKey("BuyApproveRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Connect.ApproveRequestDao", "SellApproveRequest")
                        .WithMany("SellPropertyChanges")
                        .HasForeignKey("SellApproveRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BuyApproveRequest");

                    b.Navigation("SellApproveRequest");
                });

            modelBuilder.Entity("Connect.ApproveRequestDao", b =>
                {
                    b.HasOne("Connect.AccountDao", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Connect.AccountDao", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Connect.ClientDao", "Client")
                        .WithMany("ApproveRequests")
                        .HasForeignKey("ClientId", "ClientSequence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("CreatedByAccount");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Connect.ClientDao", b =>
                {
                    b.HasOne("Connect.AccountDao", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Connect.AccountDao", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedByAccount");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Connect.ClientPaymentDao", b =>
                {
                    b.HasOne("Connect.ClientDao", "Client")
                        .WithOne("ClientPayment")
                        .HasForeignKey("Connect.ClientPaymentDao", "ClientId", "ClientSequence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Connect.NewLeadDao", b =>
                {
                    b.HasOne("Connect.AccountDao", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Connect.AccountDao", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedByAccount");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Connect.ProjectOfferDao", b =>
                {
                    b.HasOne("Connect.AccountDao", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("Connect.PropertyRecordDao", b =>
                {
                    b.HasOne("Connect.NewLeadDao", "NewLead")
                        .WithMany("SellRecords")
                        .HasForeignKey("NewLeadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Connect.ClientDao", "Buyer")
                        .WithMany("BuyRecords")
                        .HasForeignKey("BuyerId", "BuyerSequence")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Connect.ClientDao", "Seller")
                        .WithMany("SellRecords")
                        .HasForeignKey("SellerId", "SellerSequence")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Buyer");

                    b.Navigation("NewLead");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Connect.ApprovalCostSheetDao", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Connect.ApproveRequestDao", b =>
                {
                    b.Navigation("BuyPropertyChanges");

                    b.Navigation("CostSheets");

                    b.Navigation("SellPropertyChanges");
                });

            modelBuilder.Entity("Connect.ClientDao", b =>
                {
                    b.Navigation("ApproveRequests");

                    b.Navigation("BuyRecords");

                    b.Navigation("ClientPayment");

                    b.Navigation("SellRecords");
                });

            modelBuilder.Entity("Connect.NewLeadDao", b =>
                {
                    b.Navigation("SellRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
